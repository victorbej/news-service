// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pkg/api/news.proto

package __

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Объект с информацией о работоспособности сервиса
type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName   string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceStatus string `protobuf:"bytes,2,opt,name=serviceStatus,proto3" json:"serviceStatus,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{0}
}

func (x *HealthResponse) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HealthResponse) GetServiceStatus() string {
	if x != nil {
		return x.ServiceStatus
	}
	return ""
}

// Входные данные для запроса списка новостей
type NewsRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Номер строки, которой начинается выборка
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// Количество возвращаемых объектов на странице
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Поле для сортировки (active_from, date_create)
	Sort string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	// Направление сортировки (desc, asc)
	Order string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	// Поиск по строке
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	// Параметры фильтрации
	Filter *ListRequestFilter `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"` // Объект фильтарции
}

func (x *NewsRequestParams) Reset() {
	*x = NewsRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRequestParams) ProtoMessage() {}

func (x *NewsRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRequestParams.ProtoReflect.Descriptor instead.
func (*NewsRequestParams) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{1}
}

func (x *NewsRequestParams) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NewsRequestParams) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NewsRequestParams) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *NewsRequestParams) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *NewsRequestParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *NewsRequestParams) GetFilter() *ListRequestFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Параметры фильтрации
type ListRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// фильтр по пользователю
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// фильтр по активности
	//  1. не передано - опубликованные и черновики
	//  2. active - только опубликованные
	//  3. inactive черновики)
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *ListRequestFilter) Reset() {
	*x = ListRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequestFilter) ProtoMessage() {}

func (x *ListRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequestFilter.ProtoReflect.Descriptor instead.
func (*ListRequestFilter) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{2}
}

func (x *ListRequestFilter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListRequestFilter) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

// Базовый формат ответа
type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Признак успешности
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Сообщение при ошибке
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{3}
}

func (x *BaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BaseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Объект списка новостей
type NewsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список элементов
	News []*NewsObject `protobuf:"bytes,1,rep,name=news,proto3" json:"news,omitempty"`
	// Общее количество
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *NewsList) Reset() {
	*x = NewsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsList) ProtoMessage() {}

func (x *NewsList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsList.ProtoReflect.Descriptor instead.
func (*NewsList) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{4}
}

func (x *NewsList) GetNews() []*NewsObject {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *NewsList) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Объект новости
type RequestNewsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id повости. С фронта НЕ нужно передавать, необходимо для передачи id через url в методе (update)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Активность (true - активна, false - черновик)
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// Дата начала активности
	ActiveFrom int64 `protobuf:"varint,4,opt,name=activeFrom,proto3" json:"activeFrom,omitempty"`
	// Текстовое описание
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Текствое описание (для визуального редактора)
	TextJson string `protobuf:"bytes,6,opt,name=textJson,proto3" json:"textJson,omitempty"`
	// Список тегов
	Tags []*Tag `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Список файлов для прикрепления
	Files []*File `protobuf:"bytes,9,rep,name=files,proto3" json:"files,omitempty"`
	// Важное
	IsImportant bool `protobuf:"varint,10,opt,name=isImportant,proto3" json:"isImportant,omitempty"`
}

func (x *RequestNewsObject) Reset() {
	*x = RequestNewsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNewsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNewsObject) ProtoMessage() {}

func (x *RequestNewsObject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNewsObject.ProtoReflect.Descriptor instead.
func (*RequestNewsObject) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{5}
}

func (x *RequestNewsObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestNewsObject) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RequestNewsObject) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *RequestNewsObject) GetActiveFrom() int64 {
	if x != nil {
		return x.ActiveFrom
	}
	return 0
}

func (x *RequestNewsObject) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RequestNewsObject) GetTextJson() string {
	if x != nil {
		return x.TextJson
	}
	return ""
}

func (x *RequestNewsObject) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RequestNewsObject) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *RequestNewsObject) GetIsImportant() bool {
	if x != nil {
		return x.IsImportant
	}
	return false
}

// Объект новости
type NewsObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id повости
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Автор
	Author string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// Активность (true - активна, false - черновик)
	Active bool `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	// Дата начала активности
	ActiveFrom float64 `protobuf:"fixed64,5,opt,name=activeFrom,proto3" json:"activeFrom,omitempty"`
	// Текстовое описание
	Text string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	// Текствое описание (для визуального редактора)
	TextJson string `protobuf:"bytes,7,opt,name=textJson,proto3" json:"textJson,omitempty"`
	// Идентификатор пользователя
	UserId string `protobuf:"bytes,8,opt,name=userId,proto3" json:"userId,omitempty"`
	// Список тегов
	Tags []*Tag `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	// Список прикрепленных файлов
	FilesInfo []*File `protobuf:"bytes,10,rep,name=filesInfo,proto3" json:"filesInfo,omitempty"`
	// Важное
	IsImportant bool `protobuf:"varint,11,opt,name=isImportant,proto3" json:"isImportant,omitempty"`
}

func (x *NewsObject) Reset() {
	*x = NewsObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsObject) ProtoMessage() {}

func (x *NewsObject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsObject.ProtoReflect.Descriptor instead.
func (*NewsObject) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{6}
}

func (x *NewsObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsObject) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsObject) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewsObject) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *NewsObject) GetActiveFrom() float64 {
	if x != nil {
		return x.ActiveFrom
	}
	return 0
}

func (x *NewsObject) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *NewsObject) GetTextJson() string {
	if x != nil {
		return x.TextJson
	}
	return ""
}

func (x *NewsObject) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NewsObject) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewsObject) GetFilesInfo() []*File {
	if x != nil {
		return x.FilesInfo
	}
	return nil
}

func (x *NewsObject) GetIsImportant() bool {
	if x != nil {
		return x.IsImportant
	}
	return false
}

// Объект тега
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id тега
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Объект списка тегов
type TagList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Список элементов
	Tag []*Tag `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TagList) Reset() {
	*x = TagList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagList) ProtoMessage() {}

func (x *TagList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagList.ProtoReflect.Descriptor instead.
func (*TagList) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{8}
}

func (x *TagList) GetTag() []*Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Пустой запрос (служебный объект)
type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{9}
}

// Объект идентификации записи (служебный объект)
type ObjectId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ObjectId) Reset() {
	*x = ObjectId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectId) ProtoMessage() {}

func (x *ObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectId.ProtoReflect.Descriptor instead.
func (*ObjectId) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Объект идентификации записи (служебный объект, для чпу)
type ObjectSlug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *ObjectSlug) Reset() {
	*x = ObjectSlug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSlug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSlug) ProtoMessage() {}

func (x *ObjectSlug) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSlug.ProtoReflect.Descriptor instead.
func (*ObjectSlug) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{11}
}

func (x *ObjectSlug) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// Объект входящего файла
type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id файла
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Расширение
	Ext string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	// base64 для файла
	Base64 string `protobuf:"bytes,4,opt,name=base64,proto3" json:"base64,omitempty"`
	// Дата создания
	DateCreate int64 `protobuf:"varint,5,opt,name=dateCreate,proto3" json:"dateCreate,omitempty"`
	// id пользователя, создавшего файл
	UserId string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{12}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *File) GetBase64() string {
	if x != nil {
		return x.Base64
	}
	return ""
}

func (x *File) GetDateCreate() int64 {
	if x != nil {
		return x.DateCreate
	}
	return 0
}

func (x *File) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Объект идентификатора файла
type FileId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор файла
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FileId) Reset() {
	*x = FileId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileId) ProtoMessage() {}

func (x *FileId) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileId.ProtoReflect.Descriptor instead.
func (*FileId) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{13}
}

func (x *FileId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Объект ссылки на файл
type FileLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ссылка на файл
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *FileLink) Reset() {
	*x = FileLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_news_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLink) ProtoMessage() {}

func (x *FileLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_news_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLink.ProtoReflect.Descriptor instead.
func (*FileLink) Descriptor() ([]byte, []int) {
	return file_pkg_api_news_proto_rawDescGZIP(), []int{14}
}

func (x *FileLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

var File_pkg_api_news_proto protoreflect.FileDescriptor

var file_pkg_api_news_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x0e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x0a, 0x4e, 0x65,
	0x77, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x29, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x20, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x32, 0x7c, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x32, 0xaf, 0x05, 0x0a, 0x0b,
	0x4e, 0x65, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x65, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x68, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x6c, 0x75, 0x67, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f,
	0x6e, 0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2f, 0x7b, 0x73, 0x6c, 0x75, 0x67, 0x7d, 0x12, 0x60, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e,
	0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5d,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x1a, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x65, 0x77, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x32, 0x5d, 0x0a,
	0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x67, 0x42, 0x04, 0x5a, 0x02,
	0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_news_proto_rawDescOnce sync.Once
	file_pkg_api_news_proto_rawDescData = file_pkg_api_news_proto_rawDesc
)

func file_pkg_api_news_proto_rawDescGZIP() []byte {
	file_pkg_api_news_proto_rawDescOnce.Do(func() {
		file_pkg_api_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_news_proto_rawDescData)
	})
	return file_pkg_api_news_proto_rawDescData
}

var file_pkg_api_news_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_api_news_proto_goTypes = []interface{}{
	(*HealthResponse)(nil),    // 0: content_v1.HealthResponse
	(*NewsRequestParams)(nil), // 1: content_v1.NewsRequestParams
	(*ListRequestFilter)(nil), // 2: content_v1.ListRequestFilter
	(*BaseResponse)(nil),      // 3: content_v1.BaseResponse
	(*NewsList)(nil),          // 4: content_v1.NewsList
	(*RequestNewsObject)(nil), // 5: content_v1.RequestNewsObject
	(*NewsObject)(nil),        // 6: content_v1.NewsObject
	(*Tag)(nil),               // 7: content_v1.Tag
	(*TagList)(nil),           // 8: content_v1.TagList
	(*EmptyRequest)(nil),      // 9: content_v1.EmptyRequest
	(*ObjectId)(nil),          // 10: content_v1.ObjectId
	(*ObjectSlug)(nil),        // 11: content_v1.ObjectSlug
	(*File)(nil),              // 12: content_v1.File
	(*FileId)(nil),            // 13: content_v1.FileId
	(*FileLink)(nil),          // 14: content_v1.FileLink
}
var file_pkg_api_news_proto_depIdxs = []int32{
	2,  // 0: content_v1.NewsRequestParams.filter:type_name -> content_v1.ListRequestFilter
	6,  // 1: content_v1.NewsList.news:type_name -> content_v1.NewsObject
	7,  // 2: content_v1.RequestNewsObject.tags:type_name -> content_v1.Tag
	12, // 3: content_v1.RequestNewsObject.files:type_name -> content_v1.File
	7,  // 4: content_v1.NewsObject.tags:type_name -> content_v1.Tag
	12, // 5: content_v1.NewsObject.filesInfo:type_name -> content_v1.File
	7,  // 6: content_v1.TagList.tag:type_name -> content_v1.Tag
	9,  // 7: content_v1.ContentCheckService.CheckHealth:input_type -> content_v1.EmptyRequest
	1,  // 8: content_v1.NewsService.GetNews:input_type -> content_v1.NewsRequestParams
	10, // 9: content_v1.NewsService.GetOne:input_type -> content_v1.ObjectId
	11, // 10: content_v1.NewsService.GetOneBySlug:input_type -> content_v1.ObjectSlug
	5,  // 11: content_v1.NewsService.Create:input_type -> content_v1.RequestNewsObject
	5,  // 12: content_v1.NewsService.Update:input_type -> content_v1.RequestNewsObject
	10, // 13: content_v1.NewsService.Delete:input_type -> content_v1.ObjectId
	13, // 14: content_v1.NewsService.GetFileLink:input_type -> content_v1.FileId
	9,  // 15: content_v1.TagService.Get:input_type -> content_v1.EmptyRequest
	0,  // 16: content_v1.ContentCheckService.CheckHealth:output_type -> content_v1.HealthResponse
	4,  // 17: content_v1.NewsService.GetNews:output_type -> content_v1.NewsList
	6,  // 18: content_v1.NewsService.GetOne:output_type -> content_v1.NewsObject
	6,  // 19: content_v1.NewsService.GetOneBySlug:output_type -> content_v1.NewsObject
	3,  // 20: content_v1.NewsService.Create:output_type -> content_v1.BaseResponse
	3,  // 21: content_v1.NewsService.Update:output_type -> content_v1.BaseResponse
	3,  // 22: content_v1.NewsService.Delete:output_type -> content_v1.BaseResponse
	14, // 23: content_v1.NewsService.GetFileLink:output_type -> content_v1.FileLink
	8,  // 24: content_v1.TagService.Get:output_type -> content_v1.TagList
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_api_news_proto_init() }
func file_pkg_api_news_proto_init() {
	if File_pkg_api_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNewsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSlug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_news_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_pkg_api_news_proto_goTypes,
		DependencyIndexes: file_pkg_api_news_proto_depIdxs,
		MessageInfos:      file_pkg_api_news_proto_msgTypes,
	}.Build()
	File_pkg_api_news_proto = out.File
	file_pkg_api_news_proto_rawDesc = nil
	file_pkg_api_news_proto_goTypes = nil
	file_pkg_api_news_proto_depIdxs = nil
}
